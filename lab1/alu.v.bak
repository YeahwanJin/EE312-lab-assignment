`timescale 1ns / 100ps

module ALU(A,B,OP,C,Cout);

	input [15:0]A;
	input [15:0]B;
	input [3:0]OP;
	output [15:0]C;
	output Cout;

	//TODO
	always @(*) begin 
		case (OP) 
			4'b0000 : C = A + B; //addition
			4'b0001 : C = A - B; //subtraction
			4'b0010 : C = A & B; //and
			4'b0011 : C = A | B; //or
			4'b0100 : C = ~(A & B); //nand
			4'b0101 : C = ~(A | B); //nor
			4'b0110 : C = A ^ B; //xor
			4'b0111 : C = A ~^ B; //xnor
			4'b1000 : C = A; //identity
			4'b1001 : C = ~A; //not
			4'b1010 : C = A >> B; //logical right shift
			4'b1011 : C = A >>> B; //arithmetic right shift
			4'b1100 : C = {A[0], A[15:1]}; //rotate right
			4'b1101 : C = A << B; //logical left shift
			4'b1110 : C = A <<< B; //arithmetic left shift
			4'b1111 : C = {A[14:0], A[15]}; //rotate left
			default: C = 16'd0;

		endcase
	end 

	assign C = (OP == 4'b0000) ? A + B :   // ADD
           (OP == 4'b0001) ? A - B :   // SUB
           (OP == 4'b0010) ? A & B :   // AND
           (OP == 4'b0011) ? A | B :   // OR
           16'd0;                      // Default case
	
endmodule
